/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the role table and respective stored procedures

*/


USE ballhouseandcottages;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `ballhouseandcottages`.`role`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_role_Load`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_role_LoadAll`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_role_Add`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_role_Update`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_role_Delete`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_role_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `ballhouseandcottages`.`role` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_role_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_role_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`
	WHERE 		`role`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_role_LoadAll`
()
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_role_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `role` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_role_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `role`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`role`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_role_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `role`
	WHERE		`role`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_role_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`
	WHERE
		COALESCE(role.`Id`,0) = COALESCE(paramId,role.`Id`,0)
		AND COALESCE(role.`Name`,'') = COALESCE(paramName,role.`Name`,'')
		AND COALESCE(role.`Description`,'') = COALESCE(paramDescription,role.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the securityuser table and respective stored procedures

*/


USE ballhouseandcottages;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `ballhouseandcottages`.`securityuser`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_securityuser_Load`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_securityuser_LoadAll`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_securityuser_Add`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_securityuser_Update`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_securityuser_Delete`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_securityuser_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `ballhouseandcottages`.`securityuser` (
Id INT AUTO_INCREMENT,
Username VARCHAR(255),
Password VARCHAR(255),
Email VARCHAR(255),
RoleId INT,
CreateDate DATETIME,
CONSTRAINT pk_securityuser_Id PRIMARY KEY (Id),
CONSTRAINT fk_securityuser_RoleId_Role_Id FOREIGN KEY (RoleId) REFERENCES role (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_securityuser_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE 		`securityuser`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_securityuser_LoadAll`
()
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_securityuser_Add`
(
	 IN paramUsername VARCHAR(255),
	 IN paramPassword VARCHAR(255),
	 IN paramEmail VARCHAR(255),
	 IN paramRoleId INT,
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `securityuser` (Username,Password,Email,RoleId,CreateDate)
	VALUES (paramUsername, paramPassword, paramEmail, paramRoleId, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_securityuser_Update`
(
	IN paramId INT,
	IN paramUsername VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramRoleId INT,
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `securityuser`
	SET Username = paramUsername
		,Password = paramPassword
		,Email = paramEmail
		,RoleId = paramRoleId
		,CreateDate = paramCreateDate
	WHERE		`securityuser`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_securityuser_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `securityuser`
	WHERE		`securityuser`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_securityuser_Search`
(
	IN paramId INT,
	IN paramUsername VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramRoleId INT,
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE
		COALESCE(securityuser.`Id`,0) = COALESCE(paramId,securityuser.`Id`,0)
		AND COALESCE(securityuser.`Username`,'') = COALESCE(paramUsername,securityuser.`Username`,'')
		AND COALESCE(securityuser.`Password`,'') = COALESCE(paramPassword,securityuser.`Password`,'')
		AND COALESCE(securityuser.`Email`,'') = COALESCE(paramEmail,securityuser.`Email`,'')
		AND COALESCE(securityuser.`RoleId`,0) = COALESCE(paramRoleId,securityuser.`RoleId`,0)
		AND COALESCE(CAST(securityuser.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(securityuser.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			10/19/2018
Description:	Creates the page table and respective stored procedures

*/


USE ballhouseandcottages;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `ballhouseandcottages`.`page`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_page_Load`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_page_LoadAll`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_page_Add`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_page_Update`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_page_Delete`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_page_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `ballhouseandcottages`.`page` (
Id INT AUTO_INCREMENT,
Name VARCHAR(50),
Description VARCHAR(1024),
FileName VARCHAR(50),
CONSTRAINT pk_page_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_page_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`page`.`Id` AS `Id`,
		`page`.`Name` AS `Name`,
		`page`.`Description` AS `Description`,
		`page`.`FileName` AS `FileName`
	FROM `page`
	WHERE 		`page`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_page_LoadAll`
()
BEGIN
	SELECT
		`page`.`Id` AS `Id`,
		`page`.`Name` AS `Name`,
		`page`.`Description` AS `Description`,
		`page`.`FileName` AS `FileName`
	FROM `page`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_page_Add`
(
	 IN paramName VARCHAR(50),
	 IN paramDescription VARCHAR(1024),
	 IN paramFileName VARCHAR(50)
)
BEGIN
	INSERT INTO `page` (Name,Description,FileName)
	VALUES (paramName, paramDescription, paramFileName);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_page_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(50),
	IN paramDescription VARCHAR(1024),
	IN paramFileName VARCHAR(50)
)
BEGIN
	UPDATE `page`
	SET Name = paramName
		,Description = paramDescription
		,FileName = paramFileName
	WHERE		`page`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_page_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `page`
	WHERE		`page`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_page_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(50),
	IN paramDescription VARCHAR(1024),
	IN paramFileName VARCHAR(50)
)
BEGIN
	SELECT
		`page`.`Id` AS `Id`,
		`page`.`Name` AS `Name`,
		`page`.`Description` AS `Description`,
		`page`.`FileName` AS `FileName`
	FROM `page`
	WHERE
		COALESCE(page.`Id`,0) = COALESCE(paramId,page.`Id`,0)
		AND COALESCE(page.`Name`,'') = COALESCE(paramName,page.`Name`,'')
		AND COALESCE(page.`Description`,'') = COALESCE(paramDescription,page.`Description`,'')
		AND COALESCE(page.`FileName`,'') = COALESCE(paramFileName,page.`FileName`,'');
END //
DELIMITER ;




/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			10/19/2018
Description:	Creates the contentgroup table and respective stored procedures

*/


USE ballhouseandcottages;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `ballhouseandcottages`.`contentgroup`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_Load`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_LoadAll`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_Add`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_Update`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_Delete`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `ballhouseandcottages`.`contentgroup` (
Id INT AUTO_INCREMENT,
Name VARCHAR(50),
Description VARCHAR(1024),
pageId INT,
CONSTRAINT pk_contentgroup_Id PRIMARY KEY (Id),
CONSTRAINT fk_contentgroup_pageId_page_Id FOREIGN KEY (pageId) REFERENCES page (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`contentgroup`.`Id` AS `Id`,
		`contentgroup`.`Name` AS `Name`,
		`contentgroup`.`Description` AS `Description`,
		`contentgroup`.`pageId` AS `pageId`
	FROM `contentgroup`
	WHERE 		`contentgroup`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_LoadAll`
()
BEGIN
	SELECT
		`contentgroup`.`Id` AS `Id`,
		`contentgroup`.`Name` AS `Name`,
		`contentgroup`.`Description` AS `Description`,
		`contentgroup`.`pageId` AS `pageId`
	FROM `contentgroup`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_Add`
(
	 IN paramName VARCHAR(50),
	 IN paramDescription VARCHAR(1024),
	 IN parampageId INT
)
BEGIN
	INSERT INTO `contentgroup` (Name,Description,pageId)
	VALUES (paramName, paramDescription, parampageId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(50),
	IN paramDescription VARCHAR(1024),
	IN parampageId INT
)
BEGIN
	UPDATE `contentgroup`
	SET Name = paramName
		,Description = paramDescription
		,pageId = parampageId
	WHERE		`contentgroup`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `contentgroup`
	WHERE		`contentgroup`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(50),
	IN paramDescription VARCHAR(1024),
	IN parampageId INT
)
BEGIN
	SELECT
		`contentgroup`.`Id` AS `Id`,
		`contentgroup`.`Name` AS `Name`,
		`contentgroup`.`Description` AS `Description`,
		`contentgroup`.`pageId` AS `pageId`
	FROM `contentgroup`
	WHERE
		COALESCE(contentgroup.`Id`,0) = COALESCE(paramId,contentgroup.`Id`,0)
		AND COALESCE(contentgroup.`Name`,'') = COALESCE(paramName,contentgroup.`Name`,'')
		AND COALESCE(contentgroup.`Description`,'') = COALESCE(paramDescription,contentgroup.`Description`,'')
		AND COALESCE(contentgroup.`pageId`,0) = COALESCE(parampageId,contentgroup.`pageId`,0);
END //
DELIMITER ;





/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			10/18/2018
Description:	Creates the contentitem table and respective stored procedures

*/


USE ballhouseandcottages;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `ballhouseandcottages`.`contentitem`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentitem_Load`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentitem_LoadAll`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentitem_Add`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentitem_Update`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentitem_Delete`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentitem_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `ballhouseandcottages`.`contentitem` (
Id INT AUTO_INCREMENT,
ContentGroupId INT,
Name VARCHAR(255),
Description VARCHAR(1024),
Content VARCHAR(2056),
CONSTRAINT pk_contentitem_Id PRIMARY KEY (Id),
CONSTRAINT fk_contentitem_ContentGroupId_contentgroup_Id FOREIGN KEY (ContentGroupId) REFERENCES contentgroup (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentitem_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`contentitem`.`Id` AS `Id`,
		`contentitem`.`ContentGroupId` AS `ContentGroupId`,
		`contentitem`.`Name` AS `Name`,
		`contentitem`.`Description` AS `Description`,
		`contentitem`.`Content` AS `Content`
	FROM `contentitem`
	WHERE 		`contentitem`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentitem_LoadAll`
()
BEGIN
	SELECT
		`contentitem`.`Id` AS `Id`,
		`contentitem`.`ContentGroupId` AS `ContentGroupId`,
		`contentitem`.`Name` AS `Name`,
		`contentitem`.`Description` AS `Description`,
		`contentitem`.`Content` AS `Content`
	FROM `contentitem`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentitem_Add`
(
	 IN paramContentGroupId INT,
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1024),
	 IN paramContent VARCHAR(2056)
)
BEGIN
	INSERT INTO `contentitem` (ContentGroupId,Name,Description,Content)
	VALUES (paramContentGroupId, paramName, paramDescription, paramContent);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentitem_Update`
(
	IN paramId INT,
	IN paramContentGroupId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1024),
	IN paramContent VARCHAR(2056)
)
BEGIN
	UPDATE `contentitem`
	SET ContentGroupId = paramContentGroupId
		,Name = paramName
		,Description = paramDescription
		,Content = paramContent
	WHERE		`contentitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentitem_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `contentitem`
	WHERE		`contentitem`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentitem_Search`
(
	IN paramId INT,
	IN paramContentGroupId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1024),
	IN paramContent VARCHAR(2056)
)
BEGIN
	SELECT
		`contentitem`.`Id` AS `Id`,
		`contentitem`.`ContentGroupId` AS `ContentGroupId`,
		`contentitem`.`Name` AS `Name`,
		`contentitem`.`Description` AS `Description`,
		`contentitem`.`Content` AS `Content`
	FROM `contentitem`
	WHERE
		COALESCE(contentitem.`Id`,0) = COALESCE(paramId,contentitem.`Id`,0)
		AND COALESCE(contentitem.`ContentGroupId`,0) = COALESCE(paramContentGroupId,contentitem.`ContentGroupId`,0)
		AND COALESCE(contentitem.`Name`,'') = COALESCE(paramName,contentitem.`Name`,'')
		AND COALESCE(contentitem.`Description`,'') = COALESCE(paramDescription,contentitem.`Description`,'')
		AND COALESCE(contentitem.`Content`,'') = COALESCE(paramContent,contentitem.`Content`,'');
END //
DELIMITER ;




use ballhouseandcottages;
INSERT INTO `role` (`Id`, `Name`, `Description`) VALUES ('1', 'Administrator', 'Administrator Role.');

use ballhouseandcottages;
DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_securityuser_Lookup`
(
	IN paramUsername VARCHAR(255)
)
BEGIN
  SELECT
			`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE 		`securityuser`.`Username` = paramUsername;
END //
DELIMITER ;