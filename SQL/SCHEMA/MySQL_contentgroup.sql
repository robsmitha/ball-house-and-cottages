/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			10/19/2018
Description:	Creates the contentgroup table and respective stored procedures

*/


USE ballhouseandcottages;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `ballhouseandcottages`.`contentgroup`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_Load`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_LoadAll`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_Add`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_Update`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_Delete`;
DROP PROCEDURE IF EXISTS `ballhouseandcottages`.`usp_contentgroup_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `ballhouseandcottages`.`contentgroup` (
Id INT AUTO_INCREMENT,
Name VARCHAR(50),
Description VARCHAR(1024),
pageId INT,
CONSTRAINT pk_contentgroup_Id PRIMARY KEY (Id),
CONSTRAINT fk_contentgroup_pageId_page_Id FOREIGN KEY (pageId) REFERENCES page (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`contentgroup`.`Id` AS `Id`,
		`contentgroup`.`Name` AS `Name`,
		`contentgroup`.`Description` AS `Description`,
		`contentgroup`.`pageId` AS `pageId`
	FROM `contentgroup`
	WHERE 		`contentgroup`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_LoadAll`
()
BEGIN
	SELECT
		`contentgroup`.`Id` AS `Id`,
		`contentgroup`.`Name` AS `Name`,
		`contentgroup`.`Description` AS `Description`,
		`contentgroup`.`pageId` AS `pageId`
	FROM `contentgroup`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_Add`
(
	 IN paramName VARCHAR(50),
	 IN paramDescription VARCHAR(1024),
	 IN parampageId INT
)
BEGIN
	INSERT INTO `contentgroup` (Name,Description,pageId)
	VALUES (paramName, paramDescription, parampageId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(50),
	IN paramDescription VARCHAR(1024),
	IN parampageId INT
)
BEGIN
	UPDATE `contentgroup`
	SET Name = paramName
		,Description = paramDescription
		,pageId = parampageId
	WHERE		`contentgroup`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `contentgroup`
	WHERE		`contentgroup`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `ballhouseandcottages`.`usp_contentgroup_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(50),
	IN paramDescription VARCHAR(1024),
	IN parampageId INT
)
BEGIN
	SELECT
		`contentgroup`.`Id` AS `Id`,
		`contentgroup`.`Name` AS `Name`,
		`contentgroup`.`Description` AS `Description`,
		`contentgroup`.`pageId` AS `pageId`
	FROM `contentgroup`
	WHERE
		COALESCE(contentgroup.`Id`,0) = COALESCE(paramId,contentgroup.`Id`,0)
		AND COALESCE(contentgroup.`Name`,'') = COALESCE(paramName,contentgroup.`Name`,'')
		AND COALESCE(contentgroup.`Description`,'') = COALESCE(paramDescription,contentgroup.`Description`,'')
		AND COALESCE(contentgroup.`pageId`,0) = COALESCE(parampageId,contentgroup.`pageId`,0);
END //
DELIMITER ;


